"use strict";(("undefined"!=typeof self?self:this).webpackChunkregex101=("undefined"!=typeof self?self:this).webpackChunkregex101||[]).push([[961],{87168:(e,t,n)=>{n.r(t),n.d(t,{default:()=>te});var a=n(4942),r=n(45987),p=n(67294),s=n(73935),i=n(63101),d=n(53808);function u(e,...t){if(null==e)return null;if(!t||0===t.length)return e;let n=0,a="";for(let r=0,p=e.length;r<p;r++){const p=e.charAt(r);t.includes(p)&&n%2==0?(a+="\\"+p,n=0):(a+=p,"\\"===p?n++:n=0)}return n%2!=0&&(a+="\\"),a}function l(e,...t){if(null==e)return null;if(!t||0===t.length)return e;let n="";for(let a=0,r=e.length;a<r;a++){const r=e.charAt(a);t.includes(r)?n+="\\"+r:n+=r}return n}var o=n(81370),g=n.n(o),c=n(76493),h=n.n(c),f=n(94184),m=n.n(f),$=n(30837),S=n(85893);const x=({lang:e,children:t})=>{const n=(0,p.useRef)(null);return(0,p.useEffect)((()=>{$.Z.highlightElement(n.current)}),[t,e]),(0,S.jsx)("code",{className:m()(e,"gYBzB"),ref:n,children:t})},b=(e,t)=>$.Z.registerLanguage(e,t),R=class{constructor(e=""){this.string=e,this.indentLevel=0}indent(e,t=0){return" ".repeat(t)+e}append(e="",t){this.string+=this.indent(`${e}\n`,this.indentLevel),null!=t&&(this.indentLevel=t)}toString(){return this.string}};b("javascript",n(40978));class y extends p.PureComponent{_getJavascriptFlags(e){return e.replace(new RegExp(`[^${h()[g().JAVASCRIPT]}]`,"g"),"")}render(){return(0,S.jsx)(x,{lang:"js",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.testString,r=e.isSubstituting,p=e.substString,s=e.isGlobal,i=e.delimiter,u=new R,o=this._getJavascriptFlags(n);if("/"===i)u.append(`const regex = /${t}/${o};`);else{const e=l(t,"\\",i);u.append(`const regex = new RegExp(${i}${e}${i}, '${o}')`)}return u.append(`const str = \`${l(a,"$","`","\\")}\`;`),r?(u.append(`const subst = \`${l(p,"`")||""}\`;`),u.append(""),u.append("// "+(0,d.Z)("The substituted value will be contained in the result variable")),u.append("const result = str.replace(regex, subst);"),u.append(""),u.append("console.log('Substitution result: ', result);")):(u.append("let m;"),u.append(""),u.append((s?"while":"if")+" ((m = regex.exec(str)) !== null) {",4),s&&(u.append("// "+(0,d.Z)("This is necessary to avoid infinite loops with zero-width matches")),u.append("if (m.index === regex.lastIndex) {",8),u.append("regex.lastIndex++;",4),u.append("}"),u.append("")),u.append("// "+(0,d.Z)("The result can be accessed through the `m`-variable.")),u.append("m.forEach((match, groupIndex) => {",8),u.append("console.log(`Found match, group ${groupIndex}: ${match}`);",4),u.append("});",0),u.append("}")),u.toString()}}const w=y;var C=n(78850),_=n.n(C);b("php",n(92656));class v extends p.PureComponent{_escapePHPRegex(e,t){let n="";for(let t=0,a=e.length;t<a;t++)switch(e.charAt(t)){case"\\":"\\"===e.charAt(t+1)?n+="\\\\\\\\":n+="\\"+e.charAt(t+1),t++;break;case"'":n+="\\'";break;default:n+=e.charAt(t)}return n}render(){return(0,S.jsx)(x,{lang:"php",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.delimiter,r=e.testString,p=e.isSubstituting,s=e.substString,i=e.isGlobal,u=new R,o=n.replace("g",""),c=_()[g().PCRE2].includes(a)?a:"/";return u.append(`$re = '${c}${this._escapePHPRegex(t)}${c}${o}';`),u.append(`$str = '${l(r,"'","\\")}';`),p?(u.append(`$subst = '${l(s,"'","\\")}';`),u.append(""),u.append("$result = preg_replace($re, $subst, $str"+(i?"":", 1")+");"),u.append(""),u.append('echo "'+(0,d.Z)("The result of the substitution is")+' ".$result;')):(u.append(""),i?u.append("preg_match_all($re, $str, $matches, PREG_SET_ORDER, 0);"):u.append("preg_match($re, $str, $matches, PREG_OFFSET_CAPTURE, 0);"),u.append(""),u.append("// Print the entire match result"),u.append("var_dump($matches);")),u.toString()}}const P=v;var A=n(98152),N=n(35425);b("python",n(38245));class E extends p.PureComponent{_getMultilineString(e,t='"',n=!1){const a=e.match(/[^\n]+\n*|\n+/g);return/\n/.test(e)?"("+a.map((e=>n?"\tr"+t+u(e,t).replace(/\n/g,"\\n")+t:"\t"+t+l(e,"\\",t).replace(/\n/g,"\\n")+t)).join("\n").slice(1)+")":n?"r"+t+u(e,t)+t:t+l(e,"\\",t)+t}_getFlags(e){return e.split("").map((e=>{switch(e){case"i":return"re.IGNORECASE | ";case"m":return"re.MULTILINE | ";case"s":return"re.DOTALL | ";case"u":return"re.UNICODE | ";case"x":return"re.VERBOSE | ";default:return""}})).join("").replace(/ \| $/,"")}_getFormattedRegex(e,t,n=!1){return n?"r"+(t=t.repeat(3))+"\n"+u(e,t).trim().split("\n").map((e=>"\t"+e)).join("\n")+"\n\t"+t:this._getMultilineString(e,t,!0)}render(){return(0,S.jsx)(x,{lang:"py",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.delimiter,a=e.testString,r=e.flags,p=e.isSubstituting,s=e.substString,i=e.isGlobal,u=new R,l=this._getFlags(r),o=l?", "+l:"",c=!_()[g().PYTHON].includes(n)||n.length>1?'"':n,h=(new N.ZP).parse(t,{delimiter:n,flags:r,flavor:g().PYTHON}),f=(0,A.Z)(h,1)[0].state.flags.includes("x");if(u.append("# coding=utf8"),u.append("# "+(0,d.Z)("the above tag defines encoding for this document and is for Python 2.x compatibility")),u.append(""),u.append("import re"),u.append(""),u.append(`regex = ${this._getFormattedRegex(t,c,f)}`),u.append(""),u.append(`test_str = ${this._getMultilineString(a)}`),u.append(""),p)u.append(`subst = ${this._getMultilineString(s)}`),u.append(""),u.append("# "+(0,d.Z)("You can manually specify the number of replacements by changing the 4th argument")),u.append(`result = re.sub(regex, subst, test_str, ${i?"0":"1"}${o})`),u.append(""),u.append("if result:",4),u.append("print (result)",0);else{let e;u.append(`matches = re.${i?"finditer":"search"}(regex, test_str${o})`),u.append("");const t=i?"match":"matches";i?(e=(0,d.Z)("Match {1} was found at {2}","{matchNum}","{start}-{end}"),u.append("for matchNum, match in enumerate(matches, start=1):",4),u.append(""),u.append(`print ("${e}: {match}".format(matchNum = matchNum, start = match.start(), end = match.end(), match = match.group()))`)):(e=(0,d.Z)("Match was found at {1}","{start}-{end}"),u.append("if matches:",4),u.append(`print ("${e}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))`)),u.append(""),u.append(`for groupNum in range(0, len(${t}.groups())):`,8),u.append("groupNum = groupNum + 1"),u.append(""),u.append(`print ("${(0,d.Z)("Group {1} found at {2}","{groupNum}","{start}-{end}")}: {group}".format(groupNum = groupNum, start = ${t}.start(groupNum), end = ${t}.end(groupNum), group = ${t}.group(groupNum)))`,0)}return u.append(""),u.append(`# ${(0,d.Z)('Note: for Python 2.7 compatibility, use ur{1}{2} to prefix the regex and u"" to prefix the test string and substitution.',c,c)}`),u.toString()}}const O=E;b("csharp",n(63707));class j extends p.PureComponent{_getCSharpFlags(e){return e.split("").map((e=>{switch(e){case"i":return"RegexOptions.IgnoreCase | ";case"x":return"RegexOptions.IgnorePatternWhitespace | ";case"m":return"RegexOptions.Multiline | ";case"s":return"RegexOptions.Singleline | ";case"n":return"RegexOptions.ExplicitCapture | ";case"u":return"RegexOptions.CultureInvariant | ";case"R":return"RegexOptions.RightToLeft | ";default:return""}})).join("").replace(/ \| $/,"")}render(){return(0,S.jsx)(x,{lang:"csharp",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.testString,r=e.isSubstituting,p=e.substString,s=e.isGlobal,i=new R,u=this._getCSharpFlags(n);return i.append("using System;"),i.append("using System.Text.RegularExpressions;"),i.append(""),i.append("public class Example"),i.append("{",4),i.append("public static void Main()"),i.append("{",8),i.append(`string pattern = @"${t.replace(/"/g,'""')}";`),r&&i.append(`string substitution = "${p.replace(/"/g,'""')}";`),i.append(`string input = @"${a.replace(/"/g,'""')}";`),u&&i.append(`RegexOptions options = ${u};`),i.append(""),r?(i.append(`Regex regex = new Regex(pattern${u?", options":""});`),i.append(`string result = regex.Replace(input, substitution${s?"":", 1"});`,4)):s?(i.append(`foreach (Match m in Regex.Matches(input, pattern${u?", options":""}))`),i.append("{",12),i.append(`Console.WriteLine("${(0,d.Z)("'{0}' found at index {1}","{1}")}.", m.Value, m.Index);`,8),i.append("}",4)):(i.append(`Match m = Regex.Match(input, pattern${u?", options":""});`),i.append(`Console.WriteLine("${(0,d.Z)("'{0}' found at index {1}","{1}")}", m.Value, m.Index);`,4)),i.append("}",0),i.append("}"),i.toString()}}const M=j;b("java",n(28257));class Z extends p.PureComponent{_createJavaMultilineString(e){const t=e.match(/[^\n]+\n*|\n+/g);return t?t.map((e=>'\t + "'+l(e,"\\",'"').replace(/\n/g,"\\n")+'"')).join("\n").slice(4):'"'+l(e,"\\",'"')+'"'}_getJavaFlags(e){return e.split("").map((e=>{switch(e){case"i":return"Pattern.CASE_INSENSITIVE | ";case"x":return"Pattern.COMMENTS | ";case"m":return"Pattern.MULTILINE | ";case"s":return"Pattern.DOTALL | ";case"u":return"Pattern.UNICODE_CASE | ";case"U":return"Pattern.UNICODE_CHARACTER_CLASS | ";default:return""}})).join("").replace(/ \| $/,"")}_escapeCurlyBraces(e){return e.replace(/(\\*)(\\[pPx]{[^}]+}|{\d+,?\d*}|[{}])/g,((e,t,n)=>t.length%2!=0||"{"!==n&&"}"!==n?t+n:t+"\\"+n))}render(){return(0,S.jsx)(x,{lang:"java",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.testString,r=e.isSubstituting,p=e.substString,s=e.isGlobal,i=new R,u=this._getJavaFlags(n);return i.append("import java.util.regex.Matcher;"),i.append("import java.util.regex.Pattern;"),i.append(""),i.append("public class Example {",4),i.append("public static void main(String[] args) {",8),i.append(`final String regex = ${this._createJavaMultilineString(this._escapeCurlyBraces(t))};`),i.append(`final String string = ${this._createJavaMultilineString(a)};`),r&&i.append(`final String subst = ${this._createJavaMultilineString(p)};`),i.append(""),""===u?i.append("final Pattern pattern = Pattern.compile(regex);"):i.append(`final Pattern pattern = Pattern.compile(regex, ${u});`),i.append("final Matcher matcher = pattern.matcher(string);"),i.append(""),r?(i.append("// "+(0,d.Z)("The substituted value will be contained in the result variable")),s?i.append("final String result = matcher.replaceAll(subst);"):i.append("final String result = matcher.replaceFirst(subst);"),i.append(""),i.append(`System.out.println("${(0,d.Z)("Substitution result")}: " + result);`,4)):(s?i.append("while (matcher.find()) {",12):i.append("if (matcher.find()) {",12),i.append(`System.out.println("${(0,d.Z)("Full match")}: " + matcher.group(0));`),i.append(""),i.append("for (int i = 1; i <= matcher.groupCount(); i++) {",16),i.append(`System.out.println("${(0,d.Z)("Group")} " + i + ": " + matcher.group(i));`,12),i.append("}",8),i.append("}",4)),i.append("}",0),i.append("}"),i.toString()}}const T=Z;b("ruby",n(67905));class L extends p.PureComponent{render(){return(0,S.jsx)(x,{lang:"ruby",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.testString,r=e.isSubstituting,p=e.substString,s=e.isGlobal,i=new R,o=n.replace(/[^ixmo]/g,"");return i.append("re = /"+u(t,"/")+"/"+o),i.append(`str = '${l(a,"\\","'")}'`),r?(i.append(`subst = '${l(p,"\\","'")}'`),i.append(""),i.append("result = str."+(s?"g":"")+"sub(re, subst)"),i.append(""),i.append("# "+(0,d.Z)("Print the result of the substitution")),i.append("puts result")):(i.append(""),i.append("# "+(0,d.Z)("Print the match result")),s?(i.append("str.scan(re) do |match|",4),i.append("puts match.to_s",0),i.append("end")):(i.append("str.match(re) do |match|",4),i.append("puts match.to_s",0),i.append("end"))),i.toString()}}const F=L;b("rust",n(9880));class G extends p.PureComponent{render(){return(0,S.jsx)(x,{lang:"rust",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.testString,r=e.isSubstituting,p=e.substString,s=e.isGlobal,i=new R,u=0===n.replace("g","").length?"":"(?"+n.replace(/[^imsUux]/g,"")+")",o=(t.match(/"#*/g)||[""]).reduce(((e,t)=>e.length>t.length?e:t)).length,g="#".repeat(o);return i.append("// "+(0,d.Z)("include the latest version of the regex crate in your Cargo.toml")),i.append("extern crate regex;"),i.append(""),i.append("use regex::Regex;"),i.append(""),i.append("fn main() {",2),i.append(`let regex = Regex::new(r${g}"${u+t}"${g}).unwrap();`,2),i.append(`let string = "${l(a,"\\",'"')}";`),r?(i.append(`let substitution = "${l(p,"\\",'"')}";`),i.append(""),i.append("// "+(0,d.Z)("result will be a String with the substituted value")),i.append("let result = regex.replace"+(s?"_all":"")+"(string, substitution);"),i.append(""),i.append('println!("{}", result);',0)):(i.append(""),s?i.append("// "+(0,d.Z)("result will be an iterator over tuples containing the start and end indices for each match in the string")):i.append("// "+(0,d.Z)("result will be a tuple containing the start and end indices for the first match in the string")),i.append("let result = regex.captures"+(s?"_iter":"")+"(string);"),i.append(""),s?(i.append("for mat in result {",4),i.append('println!("{:?}", mat);',2),i.append("}",0)):(i.append("let (start, end) = match result {",4),i.append("Some((s, e)) => (s, e),"),i.append("None => {",8),i.append("// ...",4),i.append("}",2),i.append("};"),i.append(""),i.append(""),i.append('println!("{}", &string[start, end]);',0))),i.append("}"),i.toString()}}const I=G;b("go",n(92399));class k extends p.PureComponent{_getGoLangFlags(e){return e.replace(new RegExp(`g|[^${h()[g().GOLANG]}]`,"g"),"")}render(){return(0,S.jsx)(x,{lang:"go",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.testString,r=e.isSubstituting,p=e.substString,s=e.isGlobal,i=new R,d=this._getGoLangFlags(n),u=d?`(?${d})`:"";return i.append("package main"),i.append(""),i.append("import (",4),i.append('"regexp"'),i.append('"fmt"',0),i.append(")"),i.append(""),i.append("func main() {",4),i.append(`var re = regexp.MustCompile(\`${u}${t}\`)`),r&&!s?(i.append(`var str = []byte(\`${l(a,"`")}\`)`),i.append(`var substitution = []byte("${p}")`),i.append("var count = 1 // negative counter is equivalent to global case (replace all)"),i.append(""),i.append("str = re.ReplaceAllStringFunc(str, func(s string) string {",8),i.append("if count == 0 {",12),i.append("return s",8),i.append("}"),i.append(""),i.append("count -= 1"),i.append("return re.ReplaceAllString(s, substitution)",4),i.append("})"),i.append(""),i.append("fmt.Println(string(str))",0)):r?(i.append(`var str = \`${l(a,"`")}\``),i.append(`var substitution = "${p}"`),i.append(""),i.append("fmt.Println(re.ReplaceAllString(str, substitution))",0)):s?(i.append(`var str = \`${l(a,"`")}\``),i.append(""),i.append("for i, match := range re.FindAllString(str, -1) {",8),i.append('fmt.Println(match, "found at index", i)',4),i.append("}",0)):(i.append(`var str = \`${l(a,"`")}\``),i.append(""),i.append("if len(re.FindStringIndex(str)) > 0 {",8),i.append('fmt.Println(re.FindString(str),"found at index",re.FindStringIndex(str)[0])',4),i.append("}",0)),i.append("}"),i.toString()}}const D=k;b("perl",n(12482));class U extends p.PureComponent{render(){return(0,S.jsx)(x,{lang:"perl",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.delimiter,r=e.testString,p=e.isSubstituting,s=e.substString,i=e.isGlobal,u=new R,o=n.replace(/[A-Zg]/g,""),c=_()[g().PCRE2].includes(a)?a:"/";return u.append("use strict;"),u.append(""),u.append(`my $str = '${l(r,"'","\\")}';`),u.append(`my $regex = qr${c}${t}${c}${o}p;`),p?(u.append(`my $subst = '${l(s,"'","\\")}';`),u.append(""),u.append(`my $result = $str =~ s${c}$regex${c}$subst${c}r`+(i?"g":"")+";"),u.append(""),u.append(`print "${(0,d.Z)("The result of the substitution is")}' $result\\n";`)):(u.append(""),u.append("if ( $str =~ /$regex/"+(i?"g":"")+" ) {",2),u.append(`print "${(0,d.Z)("Whole match is {1} and its start/end positions can be obtained via {2} and {3}","${^MATCH}","\\$-[0]","\\$+[0]")}\\n";`),u.append(`# print "${(0,d.Z)("Capture Group {1} is {2} and its start/end positions can be obtained via {3} and {4}","1","$1","\\$-[1]","\\$+[1]")}\\n";`),u.append(`# print "${(0,d.Z)("Capture Group {1} is {2} ... and so on","2","$2")}\\n";`,0),u.append("}"),u.append(""),u.append(`# ${(0,d.Z)("{1} and {2} are also available with the use of '{3}'","${^POSTMATCH}","${^PREMATCH}","/p")}`),u.append(`# ${(0,d.Z)("Named capture groups can be called via {1}","$+{name}")}`)),u.toString()}}const W=U;function B(e){return e.replace(/\n/g,'" & @CRLF & _\n                "')}b("autoit",n(1892));class Y extends p.PureComponent{render(){return(0,S.jsx)(x,{lang:"autoit",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.testString,r=e.isSubstituting,p=e.substString,s=e.isGlobal,i=new R,d=n.replace("g",""),u=B(t),l=B(a),o=B(p);return r?i.append("#include <MsgBoxConstants.au3> ; to declare the Constants of MsgBox"):(i.append("#include <StringConstants.au3> ; to declare the Constants of StringRegExp"),i.append("#include <Array.au3> ; UDF needed for _ArrayDisplay and _ArrayConcatenate")),i.append(""),i.append(`Local $sRegex = "${d.length>0?`(?${d})`:""}${u}"`),i.append(`Local $sString = "${l}"`),r?(i.append(`Local $sSubst = "${o}"`),i.append(""),i.append("Local $sResult = StringRegExpReplace($sString, $sRegex, $sSubst)"),i.append(""),i.append('MsgBox($MB_SYSTEMMODAL, "Result", $sResult)')):(i.append(""),s?(i.append("Local $aArray = StringRegExp($sString, $sRegex, $STR_REGEXPARRAYGLOBALFULLMATCH)"),i.append("Local $aFullArray[0]"),i.append("For $i = 0 To UBound($aArray) -1"),i.append("    _ArrayConcatenate($aFullArray, $aArray[$i])"),i.append("Next"),i.append("$aArray = $aFullArray")):i.append("Local $aArray = StringRegExp($sString, $sRegex, $STR_REGEXPARRAYFULLMATCH)"),i.append(""),i.append("; Present the entire match result"),i.append('_ArrayDisplay($aArray, "Result")')),i.toString()}}const H=Y;class J extends p.PureComponent{render(){return(0,S.jsx)(x,{lang:"common",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.testString,r=e.isSubstituting,p=e.substString,s=new R;if(r){const e=l(a,'"'),r=l(t,"/"),i=l(p,"/");s.append(`sed -E 's/${r}/${i}/${n};t;d' <<< "${e}"`)}else s.append((0,d.Z)("This generator only supports substitution. Please update your regular expression accordingly"));return s.toString()}}const q=J;class V extends p.PureComponent{_escapeSwiftString(e=""){const t=/\n/.test(e),n=(e.match(/#+/g)||[]).reduce(((e,t)=>t.length>e?t.length:e),0),a="#".repeat(n+1);let r=a;return r+=t?'"""\n':'"',r+=e,r+=t?'\n"""':'"',r+=a,r}render(){return(0,S.jsx)(x,{lang:"swift",children:this._renderCode()})}_renderCode(){const e=this.props,t=e.regex,n=e.flags,a=e.testString,r=e.isSubstituting,p=e.substString,s=e.isGlobal,i=new R,d=[],u=n.replace(/[gmixs]/g,"");n.includes("m")&&d.push(".anchorsMatchLines"),n.includes("i")&&d.push(".caseInsensitive"),n.includes("x")&&d.push(".allowCommentsAndWhitespace"),n.includes("s")&&d.push(".dotMatchesLineSeparators");let l="";return 1===d.length?(l+=", options: ",l+=d[0]):d.length>1&&(l+=", options: [",l+=d.join(", "),l+="]"),i.append("import Foundation"),i.append(),u.length>0&&(u.indexOf("X")>-1&&(i.append("// WARNING: You included a flag that Swift doesn't support: X"),i.append("//          When this flag is set, it causes any backslash in the pattern that is followed by a letter that has no special meaning to cause an error."),i.append("//          By default in Swift, a backslash followed by a letter with no special meaning will be treated as a literal.")),u.indexOf("u")>-1&&(i.append("// WARNING: You included a flag that Swift doesn't support: u"),i.append("//          When this flag is set, it makes the pattern and subject strings to be treated as unicode."),i.append("//          Swift already treats the pattern and subject strings as unicode by default, so including this flag is redundant.")),u.indexOf("J")>-1&&(i.append("// WARNING: You included a flag that Swift doesn't support: J"),i.append("//          Wehn this flag is set, it allows duplicated capturing group names."),i.append("//          By default, Swift captures only the last value matched for a repeated capture group."),i.append("//          As an alternative, the pattern can be modified to contain one capturing group per group you want to get in the result.")),u.indexOf("A")>-1&&(i.append("// WARNING: You included a flag that Swift doesn't support: A"),i.append('//          When this flag is set, it causes the pattern to be "anchored", that is, it is constrained to match only at the start of the string which is being searched (the "subject string").'),i.append("//          As an alternative, this effect can also be achieved by appropriate constructs in the pattern itself.")),u.indexOf("U")>-1&&(i.append("// WARNING: You included a flag that Swift doesn't support: U"),i.append("//          When this flag is set, it inverts the \"greediness\" of the quantifiers so that they are not greedy by default, but become greedy if followed by '?'."),i.append("//          As an alternative, this effect can also be achieved by setting a (?U) modifier setting within the pattern or by a question mark behind a quantifier (e.g. .*?).")),u.indexOf("D")>-1&&(i.append("// WARNING: You included a flag that Swift doesn't support: D"),i.append("//          When this flag is set, it forces the a dollar sign ('$'), to always match end of the string, instead of end of the line. This option is ignored if the 'm' flag is set."),i.append("//          There's no equivalent implementation of this flag in Swift, but you may want to check the 'm' flag instead.")),i.append()),i.append(`let pattern = ${this._escapeSwiftString(t.toString())}`),i.append(`let regex = try! NSRegularExpression(pattern: pattern${l})`),i.append(`let testString = ${this._escapeSwiftString(a)}`),i.append("let stringRange = NSRange(location: 0, length: testString.utf16.count)"),r?(i.append(`let substitutionString = ${this._escapeSwiftString(p)}`),s?(i.append("let result = regex.stringByReplacingMatches(in: testString, range: stringRange, withTemplate: substitutionString)"),i.append("print(result)")):(i.append("let lookupRange = (testString as NSString).range(of: pattern, options: .regularExpression, range: stringRange)"),i.append("if lookupRange.intersection(stringRange) != nil {",4),i.append("let result = regex.stringByReplacingMatches(in: testString, range: lookupRange, withTemplate: substitutionString)"),i.append("print(result)",0),i.append("} else {",4),i.append('print("No matches were found.")',0),i.append("}"))):s?(i.append("let matches = regex.matches(in: testString, range: stringRange)"),i.append("var result: [[String]] = []"),i.append("for match in matches {",4),i.append("var groups: [String] = []"),i.append("for rangeIndex in 1 ..< match.numberOfRanges {",8),i.append("let nsRange = match.range(at: rangeIndex)"),i.append("guard !NSEqualRanges(nsRange, NSMakeRange(NSNotFound, 0)) else { continue }"),i.append("let string = (testString as NSString).substring(with: nsRange)"),i.append("groups.append(string)",4),i.append("}"),i.append("if !groups.isEmpty {",8),i.append("result.append(groups)",4),i.append("}",0),i.append("}"),i.append("print(result)")):(i.append("if let firstMatch = regex.firstMatch(in: testString, range: stringRange) {",4),i.append("let result: [String] = (1 ..< firstMatch.numberOfRanges).map { (testString as NSString).substring(with: firstMatch.range(at: $0)) }"),i.append("print(result)",0),i.append("} else {",4),i.append('print("No matches were found.")',0),i.append("}")),i.toString()}}const X=V;var z=n(90732);const Q=["language"];function K(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function ee(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?K(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):K(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const te=e=>{let t=e.language,n=(0,r.Z)(e,Q);const a=(0,p.useRef)(null),d=(e=>{switch(e){case z.aQ:return w;case z.tZ:return P;case z.OH:return O;case z.sh:return M;case z.tp:return T;case z.dg:return F;case z.Go:return I;case z.bU:return D;case z.uZ:return W;case z.SX:return H;case z.Bt:return q;case z.uv:return X;default:throw new Error(`Unknown language '${e}`)}})(t);return(0,S.jsxs)(S.Fragment,{children:[(0,S.jsx)(d,ee(ee({},n),{},{ref:a})),(0,S.jsx)(i.Tv,{topPadding:5,rightPos:5,children:(0,S.jsx)(i.qi,{getCopyComponent:()=>(0,s.findDOMNode)(a.current)})})]})}}}]);